import { gql, useQuery } from "@apollo/client";
import { Badge, Container } from "react-bootstrap";
import Loading from "../Loading/Loading";
import { DL, DLItem } from "./DescriptionList";

const getVulnerabilityDetailsQuery = gql`
  query vulnerabilityDetails($vulnerabilityId: String) {
    vulnerabilities(where: { id: $vulnerabilityId }) {
      id
      name
      cve
      ghsa
      description
      affectedVersions
      cvssScore
      cvssVector
      cwe
      references {
        url
      }
    }
  }
`;
const VulnerabilityDetails = (props) => {
  const { vulnerabilityId } = props;
  const { data, loading, error } = useQuery(getVulnerabilityDetailsQuery, {
    variables: { vulnerabilityId: vulnerabilityId },
  });

  const renderReferences = (referencesList) => {
    if (!referencesList) return;
    return referencesList.map((r, index) => (
      <li className="overflow-text">
        <a href={r.url} target="_blank">
          {r.url}
        </a>
      </li>
    ));
  };

  const renderCvss = (cvssScore) => {
    return <Badge bg={cvssScore > 5 ? "danger" : "warning"}>{cvssScore}</Badge>;
  };

  if (loading) return <Loading />;
  if (!data.vulnerabilities[0]) {
    console.error(
      "No data found when querying backend! Below is Apollo query result"
    );
    console.error({ data: data, error: error });
    return <b>No data found!</b>;
  }
  const vulnerability = data.vulnerabilities[0];
  return (
    <Container style={{ wordBreak: "break-word" }} className="px-0">
      <h4 className="pb-3">
        <b>{vulnerability.name}</b>
      </h4>
      <DL>
        <DLItem label="Id" value={vulnerability.id} />
        <DLItem
          label="CVSS Score"
          value={renderCvss(vulnerability.cvssScore)}
          alwaysShow
        />
        <DLItem label="CVSS Vector" value={vulnerability.cvssVector} />
        <DLItem label="Description" value={vulnerability.description} />

        <DLItem
          label="affectedVersions"
          value={vulnerability.affectedVersions}
        />
        <DLItem label="CWE" value={vulnerability.cwe} />
        <DLItem
          label="References"
          value={renderReferences(vulnerability.references)}
        />
      </DL>
    </Container>
  );
};

export default VulnerabilityDetails;
