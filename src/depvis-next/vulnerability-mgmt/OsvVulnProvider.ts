import { request } from "../helpers/RequestHelper";
import { Vulnerability } from "../types/vulnerability";
import { IVulnProvider } from "./IVulnProvider";

export class OsvVulnProvider implements IVulnProvider {
  /** This class provides implementation for the Sonatype OSS Index API
   * available at https://ossindex.sonatype.org/
   *
   * Sonatype OSS Index support PURL package identifier natively.
   * Use free account to get higher API rate limit
   */
  name = "OSV";
  url = "https://api.osv.dev/v1/";

  // First fetch vulnIDs for given batch, if any conain vulns, get them by 1
  // As recommended here https://github.com/google/osv.dev/issues/466
  async fetchInfo(purlList: string[]) {
    if (!purlList || purlList.length == 0) return;
    const vulnList = await this.fetchBatch(purlList);
    const res = [];
    await Promise.all(
      vulnList.map(async (v) => {
        res.push({
          purl: v.purl,
          vulnerabilities: await this.fetchVulnsForComponent(v),
        });
      })
    );
    return res;
  }
  private async fetchBatch(purlList: string[]) {
    const headers: HeadersInit = {
      "Content-Type": "application/json",
    };

    // We can get all necessary info using Purl identifier
    // Prepare body
    const componentList = purlList.map((c) => {
      //   const component = PackageURL.fromString(c);
      //   return {
      //     version: component.version,
      //     package: { name: component.name, ecosystem: component.type },
      //   };
      return { package: { purl: c } };
    });
    const body = { queries: componentList };

    //Prepare request options
    const requestOptions: RequestInit = {
      method: "POST",
      headers: headers,
      body: JSON.stringify(body),
    };

    const batchUrl = `${this.url}querybatch`;
    const { json, status } = await request(batchUrl, requestOptions);
    if (!status) {
      return [];
    }
    return this.parseResponse(json, purlList);
  }

  private async fetchVulnsForComponent(component) {
    //Prepare request options
    const requestOptions: RequestInit = {
      method: "GET",
    };

    const res = [];
    const vulnUrl = `${this.url}vulns/`;

    await Promise.all(
      component.vulns.map(async (v) => {
        const { json, status } = await request(vulnUrl + v.id, requestOptions);
        if (status) {
          const vuln = this.transformVulnerability(json);
          res.push(vuln);
        }
      })
    );
    return res;
  }
  private transformVulnerability(vulnJson) {
    const vuln: Vulnerability = {
      id: vulnJson.id,
      name: vulnJson.id,
      affectedVersions: "n/a",
      description: vulnJson.details,
      references: vulnJson.references,
    };
    return vuln;
  }

  private parseResponse(response, purlList) {
    response = response.results;
    const res = [];
    purlList.forEach((p, index) => {
      if (response[index].vulns) {
        console.log(
          "OSV - Found %d vuln for package %s",
          response[index].vulns.length,
          p
        );
        res.push({ purl: p, vulns: response[index].vulns });
      }
    });
    return res;
  }
}
