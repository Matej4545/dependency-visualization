import { request } from "../helpers/RequestHelper";
import { Reference } from "../types/reference";
import { Vulnerability } from "../types/vulnerability";
import { IVulnProvider } from "./IVulnProvider";

export class SonatypeOSSVulnProvider implements IVulnProvider {
  /** This class provides implementation for the Sonatype OSS Index API
   * available at https://ossindex.sonatype.org/
   *
   * Sonatype OSS Index support PURL package identifier natively.
   * Use free account to get higher API rate limit
   */
  name = "SonatypeOSS";
  auth_token = undefined;
  url = "https://ossindex.sonatype.org/api/v3/authorized/component-report";

  constructor() {
    if (!process.env.NEXT_PUBLIC_SONATYPE_OSS_AUTH) {
      console.warn(
        "No auth token found! Fallback to public API, which might require lower rate limit! %s"
      );
      this.url = "https://ossindex.sonatype.org/api/v3/component-report";
    } else {
      this.auth_token = process.env.NEXT_PUBLIC_SONATYPE_OSS_AUTH;
    }
  }

  fetchInfo = async (purlList: string[]) => {
    //Prepare headers
    let headers: HeadersInit = {
      accept: "application/json",
      "Content-Type": "application/json",
    };

    //Add auth token if provided
    if (this.auth_token) {
      headers.authorization = `Basic ${this.auth_token}`;
    }
    //Prepare request options
    const requestOptions: RequestInit = {
      method: "POST",
      headers: headers,
      body: JSON.stringify({ coordinates: purlList.filter((n) => n) }),
    };
    const { json, status } = await request(this.url, requestOptions);
    if (status) {
      return this.parseResponse(json);
    } else {
      return [];
    }
  };

  private parseResponse = (response) => {
    if (!response) return [];

    // Response contains array of components with relevant information, could be used to enhance package info
    return response.map((c) => {
      return {
        purl: c.coordinates,
        vulnerabilities: this.transformVulnerabilities(c.vulnerabilities),
      };
    });
  };

  private transformVulnerabilities(vulnerabilityList) {
    const vulnerabilities: [Vulnerability] = vulnerabilityList.map((v) => {
      const vuln: Vulnerability = {
        name: v.displayName,
        cvssScore: v.cvssScore,
        cvssVector: v.cvssVector,
        affectedVersions: "n/a",
        id: v.id || v.displayName,
        cve: v.cve || "n/a",
        cwe: v.cwe,
        description: `${v.title} - ${v.description}`,
        references: [
          { url: v.reference as string },
          ...v.externalReferences.map((v) => {
            return { url: v as string };
          }),
        ] as [Reference],
      };
      return vuln;
    });
    return vulnerabilities;
  }
}
