{"version":3,"sources":["helpers/Neo4jHelper.ts","interfaces/CycloneDX.ts","helpers/CycloneDXHelper.ts","stores/CypherQueryHelper.ts","helpers/downloadRepositoryHelper.ts","stores/SbomStore.ts","providers/SbomProvider.tsx","App.tsx","reportWebVitals.ts","components/MainNavbar/MainNavbar.tsx","components/Notification/Notification.tsx","providers/NotificationProvider.tsx","components/ImportForm/ImportForm.tsx","components/Error/PageNotFound.tsx","components/Node/MyNode.tsx","components/Toolbox/Toolbox.tsx","index.tsx"],"names":["BomFormat","ComponentType","ComponentScope","DEFAULT_DB_SETTINGS","process","Neo4jHelper","_this","this","Object","classCallCheck","driver","isConnected","checkConnection","asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","getServerInfo","sent","t0","console","error","stop","writeQuery","_ref2","_callee2","query","params","_context2","Query","defaultAccessMode","neo4j","session","WRITE","abrupt","_x","_x2","apply","arguments","readQuery","_ref3","_callee3","_context3","READ","_x3","_x4","_ref4","_callee4","sessionOptions","result","_context4","Error","log","run","close","_x5","_x6","_x7","auth","basic","CypherNodeTypes","CypherRelationshopTypes","XMLParserOptions","ignoreAttributes","attributeNamePrefix","ignoreDeclaration","CycloneDXHelper","xmlParser","parse","_ref","CycloneDXHelper_regeneratorRuntime","input","parsedContent","xmlParsed","validateFileExtension","name","text","t1","call","t2","XMLParser","fileName","split","pop","toLowerCase","CypherQueryHelper","mergeProjectQuery","concat","Project","mergeComponentQuery","Component","createDependencyQuery","depends_on","belongs_to","getComponentWithNeighboursQuery","getProjectsQuery","cp","require","cloneRepository","url","uuidv4","tmpPath","exec","stdout","stderr","message","SbomStore","project","isLoading","state","cqh","n4jHelper","json","parseProject","SbomStore_regeneratorRuntime","cdx","parsed","storeProject","isInResult","node","find","n","parseResult","records","map","res","nodeInfo","_fields","parseResultNode","resultNode","newNode","properties","id","elementId","label","labels","push","runQuery","JSON","stringify","downloadAndGenerate","bom","mainComponentPath","mainComponentType","mainComponent","components","dependencies","counter","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","component","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","d1","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","d2","bomFormat","CycloneDX","specVersion","version","metadata","undefined","type","application","purl","bom_ref","parseComponents","parseDependencies","dependency","deps","length","_asyncIterator","done","value","return","finish","dependsOn","ref","t3","index","findIndex","d","getDependsOn","dependsOnArray","Array","removeAll","makeObservable","observable","action","SbomContext","createContext","SbomProvider","observer","children","sbomStore","react_default","a","createElement","Provider","useSbomStore","useContext","App","_useState","useState","_useState2","slicedToArray","setName","_useState3","_useState4","response","Container","className","Row","Col","xs","Form","Control","onChange","e","target","placeholder","Button","variant","onClick","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","MainNavbar","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","NavDropdown","title","Item","href","Divider","Notification","props","Toast","onClose","delay","autohide","Header","Body","notificationsContext","notifications","addNotification","notification","clearNotification","notificationId","NotificationContext","NotificationProvider","setNotifications","useCallback","Date","now","toString","filter","contextValue","Notification_Notification_Notification","key","allowedExtensionsRegex","ImportForm","file","setFile","preview","setPreview","_useState5","_useState6","repoUrl","setRepoUrl","_useState7","_useState8","validated","setValidated","handleSubmit","useNavigate","ImportForm_regeneratorRuntime","currentTarget","checkValidity","preventDefault","stopPropagation","handlePreview","fluid","noValidate","Group","controlId","Label","required","files","alert","handleFiles","Feedback","handleGenrateFromUrl","Alert","PageNotFound","navigate","md","replace","size","MyNode","Card","style","width","margin","Title","Text","keys","p","Toolbox","setQuery","Tabs","Tab","eventKey","display","flexWrap","r","MyNode_MyNode","Id","ReactDOM","createRoot","document","getElementById","render","StrictMode","NotificationProvider_NotificationProvider","react_router_dom","components_MainNavbar_MainNavbar","react_router","path","element","src_App","ImportForm_ImportForm","Error_PageNotFound"],"mappings":"umNAEA,ICCYA,EAIAC,EAWAC,EDhBNC,EACOC,oBADPD,EAEWC,QAFXD,EAGWC,OAGJC,EAGX,SAAAA,IAAc,IAAAC,EAAAC,KAAAC,OAAAC,EAAA,EAAAD,CAAAD,KAAAF,GAAAE,KAFdG,YAEc,EAAAH,KADdI,iBACc,EAAAJ,KASdK,gBATcJ,OAAAK,EAAA,EAAAL,CAAAM,IAAAC,KASI,SAAAC,IAAA,OAAAF,IAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEId,EAAKI,OAAOW,gBAFhB,OAAAH,EAAAI,KAAAJ,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAIdM,QAAQC,MAAM,4CACdnB,EAAKK,aAAc,EALL,QAOhBL,EAAKK,aAAc,EAPH,yBAAAO,EAAAQ,SAAAV,EAAA,iBATJT,KAkBdoB,WAlBc,eAAAC,EAAApB,OAAAK,EAAA,EAAAL,CAAAM,IAAAC,KAkBD,SAAAc,EAAOC,EAAeC,GAAtB,OAAAjB,IAAAG,KAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,cAAAY,EAAAZ,KAAA,EACEd,EAAK2B,MAAMH,EAAOC,EAAQ,CAAEG,kBAAmBC,IAAMC,QAAQC,QAD/D,cAAAL,EAAAM,OAAA,SAAAN,EAAAV,MAAA,wBAAAU,EAAAN,SAAAG,MAlBC,gBAAAU,EAAAC,GAAA,OAAAZ,EAAAa,MAAAlC,KAAAmC,YAAA,GAAAnC,KAsBdoC,UAtBc,eAAAC,EAAApC,OAAAK,EAAA,EAAAL,CAAAM,IAAAC,KAsBF,SAAA8B,EAAOf,EAAeC,GAAtB,OAAAjB,IAAAG,KAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,cAAA0B,EAAA1B,KAAA,EACGd,EAAK2B,MAAMH,EAAOC,EAAQ,CAAEG,kBAAmBC,IAAMC,QAAQW,OADhE,cAAAD,EAAAR,OAAA,SAAAQ,EAAAxB,MAAA,wBAAAwB,EAAApB,SAAAmB,MAtBE,gBAAAG,EAAAC,GAAA,OAAAL,EAAAH,MAAAlC,KAAAmC,YAAA,GAAAnC,KA0Bd0B,MA1Bc,eAAAiB,EAAA1C,OAAAK,EAAA,EAAAL,CAAAM,IAAAC,KA0BN,SAAAoC,EAAOrB,EAAeC,EAA6BqB,GAAnD,IAAAhB,EAAAiB,EAAA,OAAAvC,IAAAG,KAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,UACDd,EAAKK,YADJ,CAAA2C,EAAAlC,KAAA,cAEEmC,MAAM,8BAFR,cAIAnB,EAAU9B,EAAKI,OAAO0B,QAAQgB,GAChCC,EAAS,KALPC,EAAAnC,KAAA,EAOJK,QAAQgC,IAAI,CAAE1B,MAAOA,EAAOC,OAAQA,IAPhCuB,EAAAlC,KAAA,EAQWgB,EAAQqB,IAAI3B,EAAOC,GAR9B,OAQJsB,EARIC,EAAAhC,KAAAgC,EAAAlC,KAAA,uBAAAkC,EAAAnC,KAAA,GAAAmC,EAAA/B,GAAA+B,EAAA,SAAAA,EAAA/B,GAAA,eAYNa,EAAQsB,QACRlC,QAAQgC,IAAIH,GAbNC,EAAAhB,OAAA,SAcCe,GAdD,yBAAAC,EAAA5B,SAAAyB,EAAA,kBA1BM,gBAAAQ,EAAAC,EAAAC,GAAA,OAAAX,EAAAT,MAAAlC,KAAAmC,YAAA,GACZnC,KAAKG,OAASyB,IAAMzB,OAClBP,EACAgC,IAAM2B,KAAKC,MAAM5D,EAAmCA,IAEtDI,KAAKI,aAAc,EACnBJ,KAAKK,6BCdGZ,qDAIAC,+PAWAC,83MCfZ,ICHY8D,EAKAC,EDFNC,EAAmB,CACvBC,kBAAkB,EAClBC,oBAAqB,GACrBC,mBAAmB,GAMRC,EAGX,SAAAA,IAAc,IAAAhE,EAAAC,KAAAC,OAAAC,EAAA,EAAAD,CAAAD,KAAA+D,GAAA/D,KAFdgE,eAEc,EAAAhE,KAGdiE,MAHc,eAAAC,EAAAjE,OAAAK,EAAA,EAAAL,CAAAkE,IAAA3D,KAGN,SAAAC,EAAO2D,GAAP,IAAAC,EAAAC,EAAA,OAAAH,IAAAzD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACFwD,EAAgB,KACfE,EAAsBH,EAAMI,MAF3B,CAAA7D,EAAAE,KAAA,cAGEmC,MAAM,6BAHR,cAAArC,EAAAC,KAAA,EAAAD,EAAAK,GAOcjB,EAAKiE,UAPnBrD,EAAAE,KAAA,EAOyCuD,EAAMK,OAP/C,OAAA9D,EAAA+D,GAAA/D,EAAAI,KAOEuD,EAPF3D,EAAAK,GAO6BiD,MAP7BU,KAAAhE,EAAAK,GAAAL,EAAA+D,IAQJzD,QAAQgC,IAAIqB,GAGZD,EAAgBC,EAXZ3D,EAAAE,KAAA,uBAAAF,EAAAC,KAAA,GAAAD,EAAAiE,GAAAjE,EAAA,SAcEqC,MAAM,8BAdR,eAAArC,EAAAoB,OAAA,SAgBCsC,GAhBD,yBAAA1D,EAAAQ,SAAAV,EAAA,kBAHM,gBAAAuB,GAAA,OAAAkC,EAAAhC,MAAAlC,KAAAmC,YAAA,GACZnC,KAAKgE,UAAY,IAAIa,YAAUlB,IAkC7BY,EAAwB,SAACO,GAE7B,MAAoC,QADlBA,EAASC,MAAM,KAAKC,MACpBC,yBCpDRxB,8EAKAC,6EAML,IAAMwB,EAAb,SAAAA,IAAAjF,OAAAC,EAAA,EAAAD,CAAAD,KAAAkF,GAAAlF,KACEmF,kBADF,YAAAC,OACkC3B,EAAgBA,EAAgB4B,SADlE,gQAAArF,KAQEsF,oBARF,YAAAF,OAQoC3B,EAAgBA,EAAgB8B,WARpE,gQAAAvF,KAeEwF,sBAfF,YAAAJ,OAesC3B,EAAgBA,EAAgB4B,SAftE,wMAAAD,OAmB+C3B,EAAgBA,EAAgB8B,WAnB/E,uGAAAH,OAsBkC1B,EAAwBA,EAAwB+B,YAtBlF,cAAAL,OAuB6C1B,EAAwBA,EAAwBgC,YAvB7F,0DAAA1F,KA0BE2F,gCA1BF,aAAAP,OA0BiD3B,EAAgBA,EAAgB8B,WA1BjF,sIAAAH,OA4B2D1B,EAAwB+B,WA5BnF,iBAAAzF,KA8BE4F,iBA9BF,YAAAR,OA8BiC3B,EAAgBA,EAAgB4B,SA9BjE,wBCRMQ,EAAKC,EAAQ,KAKNC,EAAkB,SAACC,GAC9B,IAAMxB,EAAOyB,cACbhF,QAAQgC,IAAIuB,GACZ,IAAM0B,EALQ,eAKY1B,EASVqB,EAAGM,KAAK,SAAU,SAACjF,EAAYkF,EAAaC,GACtDnF,EACFD,QAAQC,MAAR,UAAAkE,OAAwBlE,EAAMoF,UAI5BD,EACFpF,QAAQC,MAAR,WAAAkE,OAAyBiB,IAI3BpF,QAAQgC,IAAR,YAAAmC,OAAwBgB,MAE1B,OAAOF,ylOCfF,IAAMK,EA0BX,SAAAA,IAAc,IAAAxG,EAAAC,KAAAC,OAAAC,EAAA,EAAAD,CAAAD,KAAAuG,GAAAvG,KAtBdwG,aAsBc,EAAAxG,KAlBdyG,eAkBc,EAAAzG,KAddI,iBAcc,EAAAJ,KAVd0G,WAUc,EAAA1G,KANd2G,SAMc,EAAA3G,KAJd4G,eAIc,EAAA5G,KAFd6G,KAAe,GAED7G,KAiBd8G,aAjBc,eAAA5C,EAAAjE,OAAAK,EAAA,EAAAL,CAAA8G,IAAAvG,KAiBC,SAAAC,EAAO2D,GAAP,IAAA4C,EAAAC,EAAA,OAAAF,IAAArG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACPmG,EAAM,IAAIjD,EADHpD,EAAAE,KAAA,EAEQmG,EAAI/C,MAAMG,GAFlB,OAEP6C,EAFOtG,EAAAI,KAIbhB,EAAKmH,aAAaD,GAJL,wBAAAtG,EAAAQ,SAAAV,MAjBD,gBAAAuB,GAAA,OAAAkC,EAAAhC,MAAAlC,KAAAmC,YAAA,GAAAnC,KA8BdmH,WAAa,SAACC,GACZ,OAAOrH,EAAKyG,QAAQa,KAAK,SAACC,GACxBA,EAAE9C,KAAS4C,EAAK5C,QAhCNxE,KAoCduH,YAAc,SAACnD,GACbrE,EAAKyG,QAAU,GACfvF,QAAQgC,IAAImB,GACZA,EAAMoD,QAAQC,IAAI,SAACC,GACjB,IAAMC,EAAWD,EAAIE,QAAQ,GAC7B7H,EAAK8H,gBAAgBF,MAzCX3H,KA6Cd6H,gBAAkB,SAACC,GACjB,IAAMC,EAAU,CACdvD,KAAMsD,EAAWE,WAAWxD,KAC5ByD,GAAIH,EAAWI,UACfF,WAAYF,EAAWE,WACvBG,MAAOL,EAAWM,OAAO,IAEtBrI,EAAKoH,WAAWY,IACnBhI,EAAKyG,QAAQ6B,KAAKN,IArDR/H,KAyDdsI,SAzDc,eAAAjH,EAAApB,OAAAK,EAAA,EAAAL,CAAA8G,IAAAvG,KAyDH,SAAAc,EAAOC,GAAP,IAAAmG,EAAA,OAAAX,IAAArG,KAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,cAAAY,EAAAZ,KAAA,EACSd,EAAK6G,UAAUxF,WAAWG,EAAO,IAD1C,cACHmG,EADGjG,EAAAV,KAEThB,EAAKwH,YAAYG,GAFRjG,EAAAZ,KAAA,EAGS0H,KAAKC,UAAUzI,EAAKyG,QAAS,KAAM,GAH5C,OAGTzG,EAAK8G,KAHIpF,EAAAV,KAAA,wBAAAU,EAAAN,SAAAG,MAzDG,gBAAAW,GAAA,OAAAZ,EAAAa,MAAAlC,KAAAmC,YAAA,GAAAnC,KA+DdyI,oBA/Dc,eAAApG,EAAApC,OAAAK,EAAA,EAAAL,CAAA8G,IAAAvG,KA+DQ,SAAA8B,EAAO0D,GAAP,OAAAe,IAAArG,KAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,cAAA0B,EAAA1B,KAAA,EACDkF,IADC,OAAAxD,EAAAxB,KAAA,wBAAAwB,EAAApB,SAAAmB,MA/DR,gBAAAG,GAAA,OAAAJ,EAAAH,MAAAlC,KAAAmC,YAAA,GAAAnC,KAqEdkH,aArEc,eAAAvE,EAAA1C,OAAAK,EAAA,EAAAL,CAAA8G,IAAAvG,KAqEC,SAAAoC,EAAOwB,GAAP,IAAAsE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAnD,IAAArG,KAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,cACbd,EAAK0G,WAAY,EAIP,CACR0D,UAAW1K,EAAU2K,UACrBC,YAAa,MACbC,QAASlG,EAAMsE,IAAI4B,SAGf5B,EAAMtE,EAAMsE,IACZC,EAAoBvE,EAAMsE,IAAI6B,SAAWnG,EAAMsE,IAAI6B,SAASjB,eAAYkB,EACxE5B,EAAoBD,EAAkB8B,KACxC5B,EAA4B,CAC9B4B,KAAO7B,GAAuClJ,EAAcgL,YAC5DlG,KAAMmE,EAAkBnE,KACxBmG,KAAMhC,EAAkBgC,MAAQ,GAChCL,QAAS3B,EAAkB2B,SAAW,YACtCM,QAASjC,EAAkB,YAGzBG,EAAa/I,EAAK8K,gBAAgBnC,EAAII,WAAaJ,EAAII,WAAWQ,UAAY,IAE9EP,EAAehJ,EAAK+K,kBAAkBpC,EAAIK,aAAeL,EAAIK,aAAagC,WAAa,IAE3F9J,QAAQgC,IAAI,CAAE6F,WAAYA,EAAYkC,KAAMjC,EAAcF,cAAeA,IA1B5D9F,EAAAnC,KAAA,EA6BXb,EAAK2G,MAAL,oBAAAtB,OAAiCyD,EAAcrE,MA7BpCzB,EAAAlC,KAAA,GA8BLd,EAAK6G,UAAUxF,WAAWrB,EAAK4G,IAAIxB,kBAAmB,CAC1DX,KAAMqE,EAAcrE,KACpB8F,QAASzB,EAAcyB,QACvBK,KAAM9B,EAAc8B,KACpBF,KAAM5B,EAAc4B,OAlCX,QAqCX1K,EAAK2G,MAAL,8BAAAtB,OAA2C0D,EAAWmC,QAClDjC,EAAU,EAtCHC,GAAA,EAAAC,GAAA,EAAAnG,EAAAnC,KAAA,GAAAwI,EAAA8B,EAuCmBpC,GAvCnB,eAAA/F,EAAAlC,KAAA,GAAAuI,EAAAvI,OAAA,aAAAoI,IAAAI,EAAAtG,EAAAhC,MAAAoK,MAAA,CAAApI,EAAAlC,KAAA,gBAuCMyI,EAvCND,EAAA+B,MAwCTrL,EAAK2G,MAAL,yBAAAtB,SAAwC4D,EAAxC,QAAA5D,OAAsD0D,EAAWmC,QAxCxDlI,EAAAlC,KAAA,GAyCHd,EAAK6G,UAAUxF,WAAWrB,EAAK4G,IAAIrB,oBAAqB,CAC5Dd,KAAM8E,EAAU9E,KAChB8F,QAAShB,EAAUgB,QACnBK,KAAMrB,EAAUqB,KAChBF,KAAMnB,EAAUmB,OA7CT,QAAAxB,GAAA,EAAAlG,EAAAlC,KAAA,iBAAAkC,EAAAlC,KAAA,iBAAAkC,EAAAnC,KAAA,GAAAmC,EAAA/B,GAAA+B,EAAA,UAAAmG,GAAA,EAAAC,EAAApG,EAAA/B,GAAA,WAAA+B,EAAAnC,KAAA,GAAAmC,EAAAnC,KAAA,IAAAqI,GAAA,MAAAG,EAAAiC,OAAA,CAAAtI,EAAAlC,KAAA,gBAAAkC,EAAAlC,KAAA,GAAAuI,EAAAiC,SAAA,WAAAtI,EAAAnC,KAAA,IAAAsI,EAAA,CAAAnG,EAAAlC,KAAA,eAAAsI,EAAA,eAAApG,EAAAuI,OAAA,mBAAAvI,EAAAuI,OAAA,YAiDXtC,EAAU,EACVjJ,EAAK2G,MAAL,2BAAAtB,SAA0C4D,EAA1C,QAAA5D,OAAwD2D,EAAakC,QAlD1D1B,GAAA,EAAAC,GAAA,EAAAzG,EAAAnC,KAAA,GAAA8I,EAAAwB,EAmDYnC,GAnDZ,eAAAhG,EAAAlC,KAAA,GAAA6I,EAAA7I,OAAA,aAAA0I,IAAAI,EAAA5G,EAAAhC,MAAAoK,MAAA,CAAApI,EAAAlC,KAAA,YAmDM+I,EAnDND,EAAAyB,MAoDTrL,EAAK2G,MAAL,2BAAAtB,SAA0C4D,EAA1C,QAAA5D,OAAwD2D,EAAakC,QAChErB,EAAG2B,WAAoC,GAAvB3B,EAAG2B,UAAUN,OArDzB,CAAAlI,EAAAlC,KAAA,gBAAAkC,EAAAhB,OAAA,uBAAA8H,GAAA,EAAAC,GAAA,EAAA/G,EAAAnC,KAAA,GAAAoJ,EAAAkB,EAsDctB,EAAG2B,WAtDjB,eAAAxI,EAAAlC,KAAA,GAAAmJ,EAAAnJ,OAAA,aAAAgJ,IAAAI,EAAAlH,EAAAhC,MAAAoK,MAAA,CAAApI,EAAAlC,KAAA,gBAsDQqJ,EAtDRD,EAAAmB,MAAArI,EAAAlC,KAAA,GAuDDd,EAAK6G,UAAUxF,WAAWrB,EAAK4G,IAAInB,sBAAuB,CAC9DgB,QAASqC,EAAc+B,QACvBhB,GAAIA,EAAG4B,IACPtB,GAAIA,EAAGsB,MA1DF,QAAA3B,GAAA,EAAA9G,EAAAlC,KAAA,iBAAAkC,EAAAlC,KAAA,iBAAAkC,EAAAnC,KAAA,GAAAmC,EAAA2B,GAAA3B,EAAA,UAAA+G,GAAA,EAAAC,EAAAhH,EAAA2B,GAAA,WAAA3B,EAAAnC,KAAA,GAAAmC,EAAAnC,KAAA,IAAAiJ,GAAA,MAAAG,EAAAqB,OAAA,CAAAtI,EAAAlC,KAAA,gBAAAkC,EAAAlC,KAAA,GAAAmJ,EAAAqB,SAAA,WAAAtI,EAAAnC,KAAA,IAAAkJ,EAAA,CAAA/G,EAAAlC,KAAA,eAAAkJ,EAAA,eAAAhH,EAAAuI,OAAA,mBAAAvI,EAAAuI,OAAA,YAAA/B,GAAA,EAAAxG,EAAAlC,KAAA,iBAAAkC,EAAAlC,KAAA,iBAAAkC,EAAAnC,KAAA,GAAAmC,EAAA6B,GAAA7B,EAAA,UAAAyG,GAAA,EAAAC,EAAA1G,EAAA6B,GAAA,WAAA7B,EAAAnC,KAAA,GAAAmC,EAAAnC,KAAA,IAAA2I,GAAA,MAAAG,EAAA2B,OAAA,CAAAtI,EAAAlC,KAAA,iBAAAkC,EAAAlC,KAAA,IAAA6I,EAAA2B,SAAA,YAAAtI,EAAAnC,KAAA,KAAA4I,EAAA,CAAAzG,EAAAlC,KAAA,gBAAA4I,EAAA,gBAAA1G,EAAAuI,OAAA,qBAAAvI,EAAAuI,OAAA,aA+DXvL,EAAK2G,MAAQ,mBACbzF,QAAQgC,IAAI,QAhEDF,EAAAlC,KAAA,mBAAAkC,EAAAnC,KAAA,IAAAmC,EAAA0I,GAAA1I,EAAA,SAkEX9B,QAAQC,MAAR6B,EAAA0I,IAlEW,SAoEb1L,EAAK0G,WAAY,EApEJ,0BAAA1D,EAAA5B,SAAAyB,EAAA,oGArED,gBAAAF,GAAA,OAAAC,EAAAT,MAAAlC,KAAAmC,YAAA,GAAAnC,KA4Id6K,gBAAkB,SAAC/B,GACjB,IAAIhG,EAAuB,GAS3B,OARAgG,EAAWrB,IAAI,SAAC6B,GACdxG,EAAOuF,KAAK,CACVoC,KAAOnB,EAAUmB,MAA0B/K,EAAcgL,YACzDlG,KAAM8E,EAAU9E,KAChBmG,KAAMrB,EAAUqB,MAAQ,GACxBL,QAAShB,EAAUgB,SAAW,gBAG3BxH,GAtJK9C,KAyJd8K,kBAAoB,SAAC/B,GACnB,IAAIjG,EAAwB,GAc5B,OAbAiG,EAAatB,IAAI,SAACsD,GAChB,IAAMW,EAAQ5I,EAAO6I,UAAU,SAACC,GAC9BA,EAAEJ,IAAQT,EAAWS,OAET,GAAVE,EACF5I,EAAOuF,KAAK,CACVmD,IAAKT,EAAWS,IAChBD,UAAWxL,EAAK8L,aAAad,KAG/BjI,EAAO4I,GAAOH,UAAYxL,EAAK8L,aAAad,KAGzCjI,GAxKK9C,KA2Kd6L,aAAe,SAACd,GACd,IAAIjI,EAAwB,GAC5B,QAA6B0H,GAAzBO,EAAWA,WAAyB,OAAOjI,EAC/C,IAAIgJ,EAAsBf,EAAWA,WAKrC,OAJMe,aAA0BC,QAAQD,EAAiB,CAACA,IAC1DA,EAAerE,IAAI,SAACsD,GAClBjI,EAAOuF,KAAK,CAAEmD,IAAKT,EAAWS,QAEzB1I,GAnLK9C,KAqLdgM,UAAY,WACVjM,EAAKuI,SAAS,8BArLdtI,KAAKwG,QAAU,GACfxG,KAAKyG,WAAY,EACjBzG,KAAK0G,MAAQ,GACb1G,KAAKI,aAAc,EACnBJ,KAAK2G,IAAM,IAAIzB,EACflF,KAAK4G,UAAY,IAAI9G,EACrBmM,YAAejM,KAAM,CACnBI,YAAa8L,IACbzF,UAAWyF,IACXxF,MAAOwF,IACP1F,QAAS0F,IACTrF,KAAMqF,IACNpF,aAAcqF,OCpDdC,EAAcC,wBAAyB,IAAI9F,GAEpC+F,EAAeC,YAAS,SAAArI,GAAuB,IAApBsI,EAAoBtI,EAApBsI,SAChCC,EAAY,IAAIlG,EAEtB,OAAOmG,EAAAC,EAAAC,cAACR,EAAYS,SAAb,CAAsBzB,MAAOqB,GAAYD,KAGrCM,EAAe,kBAAMC,qBAAWX,ICkC9BY,EAxCHT,YAAS,WACnB,IADyBU,EAEDC,mBAAS,SAFRC,EAAAlN,OAAAmN,EAAA,EAAAnN,CAAAgN,EAAA,GAElBzI,EAFkB2I,EAAA,GAEZE,EAFYF,EAAA,GAAAG,EAGOJ,mBAAS,IAHhBK,EAAAtN,OAAAmN,EAAA,EAAAnN,CAAAqN,EAAA,GAGlBE,EAHkBD,EAAA,GAInBd,GAJmBc,EAAA,GAIPT,KAElB,OAAOL,EAAUhG,UACfiG,EAAAC,EAAAC,cAAA,sBAEAF,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAWC,UAAU,OACnBhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAKC,GAAI,IACPnB,EAAAC,EAAAC,cAACkB,EAAA,EAAKC,QAAN,CACEtD,KAAK,OACLuD,SAAU,SAACC,GAAD,OAAOZ,EAAQY,EAAEC,OAAO9C,QAClC+C,YAAY,sBACZ/C,MAAO5G,KAGXkI,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAKC,GAAI,GACPnB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,cAArC,eAKJ5B,EAAAC,EAAAC,cAACe,EAAA,EAAD,KAAMH,GACLf,EAAUjG,QACTiG,EAAUjG,QAAQiB,IAAI,SAACmE,GAAD,OACpBc,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAAA,WAAMhB,GACNc,EAAAC,EAAAC,cAAA,cAIJF,EAAAC,EAAAC,cAAA,yBC3BO2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxCC,EAAAT,EAAA,GAAAU,KAAAD,EAAAE,KAAA,WAAqBD,KAAK,SAAAzK,GAAiD,IAA9C2K,EAA8C3K,EAA9C2K,OAAQC,EAAsC5K,EAAtC4K,OAAQC,EAA8B7K,EAA9B6K,OAAQC,EAAsB9K,EAAtB8K,OAAQC,EAAc/K,EAAd+K,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,mEC0BCU,EA7BI,WACjB,OACExC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAQC,GAAG,OAAOC,OAAO,KAAKhB,QAAQ,QACpC3B,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACuC,EAAA,EAAOG,MAAR,CAAcC,GAAIC,IAAMC,GAAG,KAA3B,UAGA/C,EAAAC,EAAAC,cAACuC,EAAA,EAAOO,OAAR,CAAeC,gBAAc,qBAC7BjD,EAAAC,EAAAC,cAACuC,EAAA,EAAOS,SAAR,CAAiBlC,UAAU,uBACzBhB,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAKnC,UAAU,uBACbhB,EAAAC,EAAAC,cAACiD,EAAA,EAAIL,KAAL,CAAUD,GAAIC,IAAMC,GAAG,WAAvB,UAGA/C,EAAAC,EAAAC,cAACiD,EAAA,EAAIL,KAAL,CAAUD,GAAIC,IAAMC,GAAG,YAAvB,WAGA/C,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAaC,MAAM,QAAQ9H,GAAG,sBAC5ByE,EAAAC,EAAAC,cAACkD,EAAA,EAAYE,KAAb,CAAkBC,KAAK,cAAvB,mBACAvD,EAAAC,EAAAC,cAACkD,EAAA,EAAYE,KAAb,CAAkBC,KAAK,aAAvB,mBACAvD,EAAAC,EAAAC,cAACkD,EAAA,EAAYI,QAAb,MACAxD,EAAAC,EAAAC,cAACkD,EAAA,EAAYE,KAAb,CAAkBC,KAAK,UAAvB,kCCLDE,WAAe,SAACC,GACzB,OACA1D,EAAAC,EAAAC,cAACyD,GAAA,EAAD,CAAO3C,UAAU,eAAe0B,GAAIgB,EAAM/B,QAASiC,QAAS,WAAOF,EAAME,QAAQF,EAAMnI,IAAM,MAAOsI,MAAOH,EAAMG,YAAS/F,EAAWgG,WAAUJ,EAAMG,OACnJ7D,EAAAC,EAAAC,cAACyD,GAAA,EAAMI,OAAP,KACE/D,EAAAC,EAAAC,cAAA,UAAQc,UAAU,WAAW0C,EAAML,QAErCrD,EAAAC,EAAAC,cAACyD,GAAA,EAAMK,KAAP,KAAaN,EAAM3L,KAAnB,IAA0B2L,EAAMnI,OCrBhC0I,GAAuB,CACzBC,cAAe,GACfC,gBAAiB,SAACC,KAClBC,kBAAmB,SAACC,MAKlBC,GAAsB5E,wBAAwCsE,IAEvDO,GAAuB,SAAAhN,GAAqB,IAAnBsI,EAAmBtI,EAAnBsI,SAAmBS,EACXC,mBAA8ByD,GAAqBC,eADxCzD,EAAAlN,OAAAmN,EAAA,EAAAnN,CAAAgN,EAAA,GAC9C2D,EAD8CzD,EAAA,GAC/BgE,EAD+BhE,EAAA,GAG/C0D,EAAkBO,sBACpB,SAACN,GACG,IAAM7I,EAAKoJ,KAAKC,MAAMC,WACtBT,EAAa7I,GAAKA,EAClB,IAAMnF,EAAS8N,EAAcxL,OAAO0L,GACpCK,EAAiBrO,IACvB,CAAC8N,EAAeO,IAEZJ,EAAoBK,sBACtB,SAACJ,GACG,IAAMlO,EAAS8N,EAAcY,OAAO,SAAClK,GAAD,OAAOA,EAAEW,KAAO+I,IACpD/P,QAAQgC,IAAIH,GAChBqO,EAAiBrO,IACd,CAAC8N,EAAeO,IAEjBM,EAAe,CACjBb,gBAAeC,kBAAiBE,qBAGpC,OAAOrE,EAAAC,EAAAC,cAACqE,GAAoBpE,SAArB,CAA8BzB,MAASqG,GAEzCjF,EACDE,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAWC,UAAU,0BACpBkD,EAAcnJ,IAAI,SAAAH,GACf,OAAOoF,EAAAC,EAAAC,cAAC8E,GAAD,CAAcC,IAAKrK,EAAEW,GAAI8H,MAAOzI,EAAEyI,MAAOtL,KAAM6C,EAAE7C,KAAM4J,QAAS/G,EAAE+G,SAAW,QAASkC,MAAOjJ,EAAEiJ,OAzBzF,IAyBgHD,QAASS,EAAmB9I,GAAIX,EAAEW,IAAM,8xMClCjL,IAAM2J,GAAyB,mBAoGhBC,GAlGItF,YAAS,WAAM,IAAAU,EACRC,mBAAc,IADNC,EAAAlN,OAAAmN,EAAA,EAAAnN,CAAAgN,EAAA,GACzB6E,EADyB3E,EAAA,GACnB4E,EADmB5E,EAAA,GAAAG,EAEFJ,mBAAiB,IAFfK,EAAAtN,OAAAmN,EAAA,EAAAnN,CAAAqN,EAAA,GAEzB0E,EAFyBzE,EAAA,GAEhB0E,EAFgB1E,EAAA,GAAA2E,EAGFhF,mBAAiB,IAHfiF,EAAAlS,OAAAmN,EAAA,EAAAnN,CAAAiS,EAAA,GAGzBE,EAHyBD,EAAA,GAGhBE,EAHgBF,EAAA,GAAAG,EAIEpF,oBAAS,GAJXqF,EAAAtS,OAAAmN,EAAA,EAAAnN,CAAAqS,EAAA,GAIzBE,EAJyBD,EAAA,GAIdE,EAJcF,EAAA,GAM1B9F,EAAYK,IAgBZ4F,GAfSC,cD+BoB5F,qBAAWkE,IChB5B,eAAA/M,EAAAjE,OAAAK,EAAA,EAAAL,CAAA2S,KAAApS,KAAG,SAAAC,EAAOwN,GAAP,OAAA2E,KAAAlS,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAEU,IADhBoN,EAAE4E,cACNC,kBACP7E,EAAE8E,iBACF9E,EAAE+E,mBAGJP,GAAa,GACbxE,EAAE8E,iBARiBpS,EAAAE,KAAA,EASb4L,EAAU3F,aAAagL,GATV,wBAAAnR,EAAAQ,SAAAV,MAAH,gBAAAuB,GAAA,OAAAkC,EAAAhC,MAAAlC,KAAAmC,YAAA,IAaZ8Q,EAAa,eAAA5R,EAAApB,OAAAK,EAAA,EAAAL,CAAA2S,KAAApS,KAAG,SAAAc,EAAO2M,GAAP,OAAA2E,KAAAlS,KAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,UACpBoN,EAAE8E,iBADkBtR,EAAAT,GAEpB8Q,GAFoBrQ,EAAAT,GAAA,CAAAS,EAAAZ,KAAA,eAAAY,EAAAiD,GAEZuN,EAFYxQ,EAAAZ,KAAA,EAEKiR,EAAKrN,OAFV,OAAAhD,EAAAmD,GAAAnD,EAAAV,MAAA,EAAAU,EAAAiD,IAAAjD,EAAAmD,IAAA,wBAAAnD,EAAAN,SAAAG,MAAH,gBAAAW,GAAA,OAAAZ,EAAAa,MAAAlC,KAAAmC,YAAA,GAUnB,OACEuK,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAWyF,MAAM,OACfxG,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAWC,UAAU,OACnBhB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMqF,YAAU,EAACX,UAAWA,GAC1B9F,EAAAC,EAAAC,cAACkB,EAAA,EAAKsF,MAAN,CAAYC,UAAU,QACpB3G,EAAAC,EAAAC,cAACkB,EAAA,EAAKwF,MAAN,kBACA5G,EAAAC,EAAAC,cAACkB,EAAA,EAAKC,QAAN,CACEwF,UAAQ,EACR9I,KAAK,OACL0D,YAAY,mBACZH,SAAU,SAACC,IA9CH,SAACA,GACnB,IAAMuF,EAAQvF,EAAEC,OAAOsF,MACvB,GAAKA,EAAL,CACA,IAAM1B,EAAO0B,EAAM,GAEnB,GADAvS,QAAQgC,IAAI6O,IACPF,GAAuBzL,KAAK2L,EAAKtN,MAGpC,OAFAiP,MAAM,uCACN1B,EAAQ,IAGVA,EAAQD,IAqCI4B,CAAYzF,MAGhBvB,EAAAC,EAAAC,cAACkB,EAAA,EAAKC,QAAQ4F,SAAd,CAAuBlJ,KAAK,WAA5B,iDAEFiC,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAQ3D,KAAK,SAAS6D,QAAS,SAACL,GAAD,OAAOyE,EAAazE,IAAIP,UAAU,QAAjE,eAGAhB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,SAACL,GAAD,OAAOgF,EAAchF,KAA1D,YAIFvB,EAAAC,EAAAC,cAAA,yEACAF,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACEpB,EAAAC,EAAAC,cAACkB,EAAA,EAAKsF,MAAN,CAAYC,UAAU,WACpB3G,EAAAC,EAAAC,cAACkB,EAAA,EAAKwF,MAAN,uBACA5G,EAAAC,EAAAC,cAACkB,EAAA,EAAKC,QAAN,CACEwF,UAAQ,EACR9I,KAAK,OACL0D,YAAY,gCACZH,SAAU,SAACC,GACToE,EAAWpE,EAAEC,OAAO9C,UAGxBsB,EAAAC,EAAAC,cAACkB,EAAA,EAAKC,QAAQ4F,SAAd,CAAuBlJ,KAAK,WAA5B,iDAEFiC,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAQ3D,KAAK,SAAS6D,QAAS,SAACL,GAAD,OA1CV,SAACA,GAC5BA,EAAE8E,iBACFtG,EAAUhE,oBAAoB2J,GAwCcwB,CAAqB3F,IAAIP,UAAU,QAAzE,iBAKHsE,GACCtF,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAAA,uBAAekF,EAAKtN,MACpBkI,EAAAC,EAAAC,cAAA,WAAMoF,IAGVtF,EAAAC,EAAAC,cAACiH,EAAA,EAAD,KAAQpH,EAAU/F,UC5EToN,GAxBM,WACnB,IAAIC,EAAWpB,cAKf,OACEjG,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAWC,UAAU,eACnBhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAKD,UAAU,iCACbhB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAKoG,GAAG,QACNtH,EAAAC,EAAAC,cAAA,kDAGJF,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAKD,UAAU,6BACbhB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAKoG,GAAG,QACNtH,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAQE,QAAS,WAXvByF,EAAS,IAAK,CAAEE,SAAS,KAWeC,KAAK,MAAvC,4DCRGC,GAAS,SAAC/D,GACrB,OACE1D,EAAAC,EAAAC,cAACwH,GAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,QAASC,OAAQ,WACrC7H,EAAAC,EAAAC,cAACwH,GAAA,EAAKI,MAAN,KAAapE,EAAM5L,MAClB4L,EAAM3F,MAAQiC,EAAAC,EAAAC,cAACwH,GAAA,EAAKI,MAAN,KAAapE,EAAM3F,MAClCiC,EAAAC,EAAAC,cAACwH,GAAA,EAAKK,KAAN,KACGrE,EAAMpI,YACL/H,OAAOyU,KAAKtE,EAAMpI,YAAYP,IAAI,SAACkN,GACjC,OACEjI,EAAAC,EAAAC,cAAA,WACG+H,EADH,KACQvE,EAAMpI,WAAW2M,SCf1BC,GAAUrI,YAAS,WAAM,IAAAU,EACVC,mBAAS,sBADCC,EAAAlN,OAAAmN,EAAA,EAAAnN,CAAAgN,EAAA,GAC7B1L,EAD6B4L,EAAA,GACtB0H,EADsB1H,EAAA,GAAAG,EAEVJ,mBAAc,IAFJK,EAAAtN,OAAAmN,EAAA,EAAAnN,CAAAqN,EAAA,GAG9Bb,GAH8Bc,EAAA,GAAAA,EAAA,GAGlBT,KAWlB,OACEJ,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SACEnC,KAAK,OACLuD,SAAU,SAACC,GACT4G,EAAS5G,EAAEC,OAAO9C,OAAS,KAE7BA,MAAO7J,IAETmL,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACEE,QAAS,WAnBb7B,EAAUnE,SAAS/G,KAkBjB,cAOAmL,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACEC,QAAQ,iBACRC,QAAS,WACP7B,EAAUT,cAHd,oBAQAU,EAAAC,EAAAC,cAACkI,GAAA,EAAD,KACEpI,EAAAC,EAAAC,cAACmI,GAAA,EAAD,CAAKC,SAAS,OAAOjF,MAAM,QACzBrD,EAAAC,EAAAC,cAAA,WAAMH,EAAU5F,KAAO4F,EAAU5F,KAAO,KAE1C6F,EAAAC,EAAAC,cAACmI,GAAA,EAAD,CAAKC,SAAS,OAAOjF,MAAM,OAAOsE,MAAO,CAAEY,QAAS,OAAQC,SAAU,SACnEzI,EAAUjG,SACTiG,EAAUjG,QAAQiB,IAAI,SAAC0N,GACrB,OAAOzI,EAAAC,EAAAC,cAACwI,GAAD,CAAQnN,GAAIkN,EAAEE,GAAI7Q,KAAM2Q,EAAE3Q,KAAMwD,WAAYmN,EAAEnN,WAAYyC,KAAM0K,EAAEhN,eCvC1EmN,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhJ,EAAAC,EAAAC,cAACF,EAAAC,EAAMgJ,WAAP,KACEjJ,EAAAC,EAAAC,cAACgJ,GAAD,KACElJ,EAAAC,EAAAC,cAACN,EAAD,KACEI,EAAAC,EAAAC,cAACiJ,EAAA,EAAD,KACEnJ,EAAAC,EAAAC,cAACkJ,EAAD,MACApJ,EAAAC,EAAAC,cAACmJ,EAAA,EAAD,KACErJ,EAAAC,EAAAC,cAACmJ,EAAA,EAAD,CAAOC,KAAK,IAAIC,QAASvJ,EAAAC,EAAAC,cAACsJ,EAAD,QACzBxJ,EAAAC,EAAAC,cAACmJ,EAAA,EAAD,CAAOC,KAAK,SAASC,QAASvJ,EAAAC,EAAAC,cAACuJ,GAAD,QAC9BzJ,EAAAC,EAAAC,cAACmJ,EAAA,EAAD,CAAOC,KAAK,UAAUC,QAASvJ,EAAAC,EAAAC,cAACgI,GAAD,QAC/BlI,EAAAC,EAAAC,cAACmJ,EAAA,EAAD,CAAOC,KAAK,IAAIC,QAASvJ,EAAAC,EAAAC,cAACwJ,GAAD,cAWrC7H","file":"static/js/main.2b75d25b.chunk.js","sourcesContent":["import neo4j from 'neo4j-driver';\r\n\r\nconst DEFAULT_DB_SETTINGS = {\r\n  neo4jHost: process.env.REACT_APP_NEO4J_HOST || 'neo4j://localhost:7687',\r\n  neo4jUsername: process.env.REACT_APP_NEO4J_USER || 'neo4j',\r\n  neo4jPassword: process.env.REACT_APP_NEO4J_PASSWORD || 'test',\r\n};\r\n\r\nexport class Neo4jHelper {\r\n  driver: any;\r\n  isConnected: boolean;\r\n  constructor() {\r\n    this.driver = neo4j.driver(\r\n      DEFAULT_DB_SETTINGS.neo4jHost,\r\n      neo4j.auth.basic(DEFAULT_DB_SETTINGS.neo4jUsername, DEFAULT_DB_SETTINGS.neo4jPassword)\r\n    );\r\n    this.isConnected = false;\r\n    this.checkConnection();\r\n  }\r\n\r\n  checkConnection = async () => {\r\n    try {\r\n      const res = await this.driver.getServerInfo();\r\n    } catch {\r\n      console.error('Could not make connection to the server!');\r\n      this.isConnected = false;\r\n    }\r\n    this.isConnected = true;\r\n  };\r\n  writeQuery = async (query: string, params: Record<string, any>) => {\r\n    return await this.Query(query, params, { defaultAccessMode: neo4j.session.WRITE });\r\n  };\r\n\r\n  readQuery = async (query: string, params: Record<string, any>) => {\r\n    return await this.Query(query, params, { defaultAccessMode: neo4j.session.READ });\r\n  };\r\n\r\n  Query = async (query: string, params: Record<string, any>, sessionOptions: Record<string, any> | undefined) => {\r\n    if (!this.isConnected) {\r\n      throw Error('Database is not connected!');\r\n    }\r\n    const session = this.driver.session(sessionOptions);\r\n    var result = null;\r\n    try {\r\n      console.log({ query: query, params: params });\r\n      result = await session.run(query, params);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n    session.close();\r\n    console.log(result);\r\n    return result;\r\n  };\r\n}\r\n","// interface Iis based on CycloneDX specification\r\n// see https://cyclonedx.org/specification/overview/ for more details\r\n\r\nexport enum BomFormat {\r\n  'CycloneDX',\r\n}\r\n\r\nexport enum ComponentType {\r\n  'application',\r\n  'framework',\r\n  'library',\r\n  'container',\r\n  'operating-system',\r\n  'device',\r\n  'firmware',\r\n  'file',\r\n}\r\n\r\nexport enum ComponentScope {\r\n  'required',\r\n  'optional',\r\n  'excluded',\r\n}\r\nexport interface ISbomProject {\r\n  bomFormat: BomFormat;\r\n  specVersion: string;\r\n  version: number;\r\n  metadata?: IMetadata;\r\n  serialNumber?: string;\r\n  components?: Array<IComponent>;\r\n  services?: Array<IService>;\r\n  dependencies?: Array<IDependency>;\r\n  vulnerabilities?: Array<IVulnerability>;\r\n  signature?: ISignature;\r\n  properties?: Map<string, string>;\r\n}\r\n\r\nexport interface IDependency {\r\n  ref: string;\r\n  properties?: Map<string, string>;\r\n  dependsOn?: Array<IDependency>;\r\n}\r\n\r\nexport interface IComponent {\r\n  type: ComponentType;\r\n  name: string;\r\n  mime_type?: string;\r\n  bom_ref?: string;\r\n  supplier?: string;\r\n  author?: string;\r\n  publisher?: string;\r\n  group?: string;\r\n  version?: string;\r\n  description?: string;\r\n  scope?: ComponentScope;\r\n  hashes?: Array<string>;\r\n  licenses?: Array<string>;\r\n  copyright?: string;\r\n  cpe?: string;\r\n  purl?: string;\r\n  swid?: ISwid;\r\n  modified?: boolean;\r\n  pedigree?: any;\r\n  externalReferences?: Array<any>;\r\n  components?: Array<IComponent>;\r\n  properties?: Map<string, string>;\r\n  signature?: ISignature;\r\n}\r\n\r\nexport interface ISwid {\r\n  tagId: string;\r\n  name: string;\r\n  version?: string;\r\n  url?: string;\r\n}\r\n\r\nexport interface IService {\r\n  name: string;\r\n}\r\n\r\nexport interface IVulnerability {\r\n  bom_ref?: string;\r\n  id?: string;\r\n  source?: string;\r\n  references?: Array<IVulnerabilityReference>;\r\n  ratings?: Array<string>;\r\n}\r\n\r\nexport interface IVulnerabilityReference {\r\n  id: string;\r\n  source: string;\r\n}\r\nexport interface ISignature {\r\n  value: string;\r\n  algorithm: string;\r\n}\r\n\r\nexport interface IMetadata {\r\n  timestamp?: Date;\r\n  tools?: Array<string>;\r\n  authors?: Array<string>;\r\n  component?: IComponent;\r\n  manufacture?: string;\r\n  supplier?: string;\r\n  licenses?: Array<string>;\r\n}\r\n","import { BomFormat, ISbomProject } from '../interfaces/CycloneDX';\r\nimport { XMLParser } from 'fast-xml-parser';\r\n\r\nconst XMLParserOptions = {\r\n  ignoreAttributes: false,\r\n  attributeNamePrefix: '',\r\n  ignoreDeclaration: true,\r\n};\r\n\r\n/**\r\n * Class for parsing and working with CycloneDX objects\r\n */\r\nexport class CycloneDXHelper {\r\n  xmlParser: XMLParser;\r\n\r\n  constructor() {\r\n    this.xmlParser = new XMLParser(XMLParserOptions);\r\n  }\r\n  parse = async (input: File) => {\r\n    let parsedContent = null;\r\n    if (!validateFileExtension(input.name)) {\r\n      throw Error('File extension is not xml');\r\n    }\r\n\r\n    try {\r\n      const xmlParsed = this.xmlParser.parse(await input.text());\r\n      console.log(xmlParsed);\r\n      // Currently only json\r\n      //parsedContent = await JSON.stringify(xmlParsed, null, 2);\r\n      parsedContent = xmlParsed;\r\n      //parsedContent = createProject(xmlParsed);\r\n    } catch {\r\n      throw Error('Could not parse the input!');\r\n    }\r\n    return parsedContent;\r\n  };\r\n}\r\n\r\nconst createProject = (project: any) => {\r\n  const newProject: ISbomProject = {\r\n    bomFormat: BomFormat.CycloneDX,\r\n    specVersion: '1.4',\r\n    version: project.version,\r\n    components: [],\r\n  };\r\n  return newProject;\r\n};\r\n\r\nconst createComponent = (component: any) => {};\r\n\r\nconst validateFileExtension = (fileName: string) => {\r\n  const extension = fileName.split('.').pop();\r\n  return extension!.toLowerCase() === 'xml';\r\n};\r\n\r\n// import path from 'path';\r\n// const { XMLParser } = require('fast-xml-parser');\r\n\r\n// const options = {\r\n//   ignoreAttributes: false,\r\n//   attributeNamePrefix: 'A_',\r\n// };\r\n// const parser = new XMLParser(options);\r\n\r\n// const ParseSBOM = async (file: File) => {\r\n//   const obj = parser.parse(file);\r\n//   console.log(createMap(obj));\r\n// };\r\n\r\n// async function createMap(input: any) {\r\n//   let components = input.bom.components.component;\r\n//   let dependencies = input.bom.dependencies.dependency;\r\n//   const p = input.bom.metadata.component;\r\n\r\n//   const res = n4j.writeQuery(`MERGE (n:Dependency {\r\n//         name: '${p.name}',\r\n//         version: '${p.version}',\r\n//         purl: '${p['A_bom-ref']}'\r\n//     })`);\r\n//   components.forEach(async (component) => {\r\n//     const res = n4j.writeQuery(\r\n//       `MERGE (n:Dependency {\r\n//               name: '${component.name}',\r\n//               version: '${component.version}',\r\n//               purl: '${component.purl}'\r\n//           })`\r\n//     );\r\n//   });\r\n//   let deps = Array();\r\n//   dependencies.forEach(async (dependency: any) => {\r\n//     if ('dependency' in dependency) {\r\n//       const trans_dep: any = dependency.dependency;\r\n//       if (!(trans_dep instanceof Array)) {\r\n//         const res = n4j.writeQuery(\r\n//           `MATCH (d1:Dependency {purl: '${dependency.A_ref}'}) MATCH (d2:Dependency {purl: '${trans_dep.A_ref}'}) MERGE (d1)-[:depends_on]->(d2) RETURN d1, d2`\r\n//         );\r\n//         deps.push(`${dependency.A_ref} <- ${trans_dep.A_ref}`);\r\n//       } else {\r\n//         trans_dep.forEach(async (d) => {\r\n//           const res = n4j.writeQuery(\r\n//             `MATCH (d1:Dependency {purl: '${dependency.A_ref}'}) MATCH (d2:Dependency {purl: '${d.A_ref}'}) MERGE (d1)-[:depends_on]->(d2) RETURN d1, d2`\r\n//           );\r\n//           deps.push(`${dependency.A_ref} <- ${d.A_ref}`);\r\n//         });\r\n//       }\r\n//     }\r\n//   });\r\n//   console.log(deps);\r\n//   const result = { components: components, dependencies: dependencies };\r\n//   return JSON.stringify(result);\r\n// }\r\n","export enum CypherNodeTypes {\r\n  'Project',\r\n  'Component',\r\n}\r\n\r\nexport enum CypherRelationshopTypes {\r\n  'depends_on',\r\n  'belongs_to',\r\n}\r\n\r\n/** Provides queries for Neo4J Database */\r\nexport class CypherQueryHelper {\r\n  mergeProjectQuery = `MERGE (p:${CypherNodeTypes[CypherNodeTypes.Project]} {\r\n                                    name: $name,\r\n                                    version: $version,\r\n                                    purl: $purl,\r\n                                    type: $type\r\n                                }) RETURN p`;\r\n\r\n  mergeComponentQuery = `MERGE (c:${CypherNodeTypes[CypherNodeTypes.Component]} {\r\n                                    name: $name,\r\n                                    version: $version,\r\n                                    purl: $purl,\r\n                                    type: $type\r\n                                }) RETURN c`;\r\n\r\n  createDependencyQuery = `MATCH (p:${CypherNodeTypes[CypherNodeTypes.Project]} {\r\n                                    purl: $project\r\n                                }) MATCH (d1 {\r\n                                    purl: $d1\r\n                                }) MATCH (d2:${CypherNodeTypes[CypherNodeTypes.Component]} {\r\n                                    purl: $d2\r\n                                }) MERGE (d1)-[:${\r\n                                  CypherRelationshopTypes[CypherRelationshopTypes.depends_on]\r\n                                }]->(d2)-[:${CypherRelationshopTypes[CypherRelationshopTypes.belongs_to]}]->(p) \r\n                                RETURN d1, d2`;\r\n\r\n  getComponentWithNeighboursQuery = `MATCH c=(:${CypherNodeTypes[CypherNodeTypes.Component]} {\r\n                                                        purl: $purl\r\n                                                    })-[:${CypherRelationshopTypes.depends_on}]-() RETURN P`;\r\n\r\n  getProjectsQuery = `MATCH (p:${CypherNodeTypes[CypherNodeTypes.Project]}) RETURN p`;\r\n}\r\n","import { v4 as uuidv4 } from 'uuid';\r\n//import path from 'path';\r\nimport { rm } from 'fs';\r\nconst cp = require('child_process');\r\nimport { useNotification } from '../providers/NotificationProvider';\r\nimport { not } from 'cypher-query-builder';\r\nconst repoDir = './tmp/repos/';\r\nconst gitPath = 'C:\\\\Program Files\\\\Git\\\\cmd\\\\git.exe';\r\nexport const cloneRepository = (url: string) => {\r\n  const name = uuidv4();\r\n  console.log(name);\r\n  const tmpPath = repoDir + name; //path.join(repoDir, name);\r\n  const gitArguments = ['clone', url, tmpPath, '--depth 1'];\r\n  // const process = execFile('git', gitArguments, (error, stdout, stderr) => {\r\n  //   if (error) {\r\n  //     console.error('stderr', stderr);\r\n  //     throw error;\r\n  //   }\r\n  //   console.log('stdout', stdout);\r\n  // });\r\n  const process = cp.exec('whoami', (error: any, stdout: any, stderr: any) => {\r\n    if (error) {\r\n      console.error(`error: ${error.message}`);\r\n      return;\r\n    }\r\n\r\n    if (stderr) {\r\n      console.error(`stderr: ${stderr}`);\r\n      return;\r\n    }\r\n\r\n    console.log(`stdout:\\n${stdout}`);\r\n  });\r\n  return tmpPath;\r\n};\r\n\r\n// export const removeRepository = async (repositoryPath?: string) => {\r\n//   const tmpPath = path.join(repoDir, repositoryPath ? repositoryPath : '');\r\n//   rm(tmpPath, { recursive: true, force: true }, () => {});\r\n// };\r\n","import { action, makeObservable, observable } from 'mobx';\r\nimport { Neo4jHelper } from '../helpers/Neo4jHelper';\r\nimport { CycloneDXHelper } from '../helpers/CycloneDXHelper';\r\nimport { CypherQueryHelper } from './CypherQueryHelper';\r\nimport { BomFormat, ComponentType, IComponent, IDependency, ISbomProject } from '../interfaces/CycloneDX';\r\nimport { cloneRepository } from '../helpers/downloadRepositoryHelper';\r\nimport { NodeSbomGenerator } from '../sbomGenerators/NodeSbomGenerator';\r\n\r\ninterface IResultNode {\r\n  name: string;\r\n  id: number;\r\n  properties?: any;\r\n  label?: string;\r\n  dependencies?: [any];\r\n}\r\n/**\r\n * This class provides functions for working with the input SBOM file.\r\n */\r\nexport class SbomStore {\r\n  /**\r\n   * Store projects and all their components.\r\n   */\r\n  project: IResultNode[]; //Array<ISbomProject>;\r\n  /**\r\n   * Indicates whether the store is loading.\r\n   */\r\n  isLoading: Boolean;\r\n  /**\r\n   * Indicates whether the neo4j database is connected.\r\n   */\r\n  isConnected: Boolean;\r\n  /**\r\n   * Expose more detailed state\r\n   */\r\n  state: string;\r\n  /**\r\n   * CypherQueryHelper\r\n   */\r\n  cqh: CypherQueryHelper;\r\n\r\n  n4jHelper: Neo4jHelper;\r\n\r\n  json: string = '';\r\n\r\n  constructor() {\r\n    this.project = [];\r\n    this.isLoading = false;\r\n    this.state = '';\r\n    this.isConnected = false;\r\n    this.cqh = new CypherQueryHelper();\r\n    this.n4jHelper = new Neo4jHelper();\r\n    makeObservable(this, {\r\n      isConnected: observable,\r\n      isLoading: observable,\r\n      state: observable,\r\n      project: observable,\r\n      json: observable,\r\n      parseProject: action,\r\n    });\r\n  }\r\n\r\n  parseProject = async (input: File) => {\r\n    const cdx = new CycloneDXHelper();\r\n    const parsed = await cdx.parse(input);\r\n\r\n    this.storeProject(parsed);\r\n  };\r\n\r\n  /**id={r._fields[0].elementId}\r\n                  name={r._fields[0].properties.name}\r\n                  properties={r._fields[0].properties}\r\n                  type={r._fields[0].labels[0]}\r\n   */\r\n\r\n  isInResult = (node: any) => {\r\n    return this.project.find((n) => {\r\n      n.name === node.name;\r\n    });\r\n  };\r\n\r\n  parseResult = (input: any) => {\r\n    this.project = [];\r\n    console.log(input);\r\n    input.records.map((res: any) => {\r\n      const nodeInfo = res._fields[0];\r\n      this.parseResultNode(nodeInfo);\r\n    });\r\n  };\r\n\r\n  parseResultNode = (resultNode: any) => {\r\n    const newNode = {\r\n      name: resultNode.properties.name,\r\n      id: resultNode.elementId,\r\n      properties: resultNode.properties,\r\n      label: resultNode.labels[0],\r\n    };\r\n    if (!this.isInResult(newNode)) {\r\n      this.project.push(newNode);\r\n    }\r\n  };\r\n\r\n  runQuery = async (query: string) => {\r\n    const res = await this.n4jHelper.writeQuery(query, {});\r\n    this.parseResult(res);\r\n    this.json = await JSON.stringify(this.project, null, 2);\r\n  };\r\n\r\n  downloadAndGenerate = async (url: string) => {\r\n    const path = await cloneRepository(url);\r\n    // const generator = new NodeSbomGenerator();\r\n    // await generator.generate(path);\r\n  };\r\n\r\n  storeProject = async (input: any) => {\r\n    this.isLoading = true;\r\n\r\n    //Create main project\r\n    let project: ISbomProject;\r\n    project = {\r\n      bomFormat: BomFormat.CycloneDX,\r\n      specVersion: '1.3',\r\n      version: input.bom.version,\r\n    };\r\n\r\n    const bom = input.bom;\r\n    const mainComponentPath = input.bom.metadata ? input.bom.metadata.component : undefined;\r\n    const mainComponentType = mainComponentPath.type;\r\n    let mainComponent: IComponent = {\r\n      type: (mainComponentType as ComponentType) || ComponentType.application,\r\n      name: mainComponentPath.name,\r\n      purl: mainComponentPath.purl || '',\r\n      version: mainComponentPath.version || 'undefined',\r\n      bom_ref: mainComponentPath['bom-ref'],\r\n    };\r\n\r\n    let components = this.parseComponents(bom.components ? bom.components.component : []);\r\n\r\n    let dependencies = this.parseDependencies(bom.dependencies ? bom.dependencies.dependency : []);\r\n\r\n    console.log({ components: components, deps: dependencies, mainComponent: mainComponent });\r\n\r\n    try {\r\n      this.state = `Creating project ${mainComponent.name}`;\r\n      await this.n4jHelper.writeQuery(this.cqh.mergeProjectQuery, {\r\n        name: mainComponent.name,\r\n        version: mainComponent.version,\r\n        purl: mainComponent.purl,\r\n        type: mainComponent.type,\r\n      });\r\n\r\n      this.state = `Creating components - 0 of ${components.length}`;\r\n      let counter = 0;\r\n      for await (const component of components) {\r\n        this.state = `Creating components - ${++counter} of ${components.length}`;\r\n        await this.n4jHelper.writeQuery(this.cqh.mergeComponentQuery, {\r\n          name: component.name,\r\n          version: component.version,\r\n          purl: component.purl,\r\n          type: component.type,\r\n        });\r\n      }\r\n\r\n      counter = 0;\r\n      this.state = `Creating dependencies - ${++counter} of ${dependencies.length}`;\r\n      for await (const d1 of dependencies) {\r\n        this.state = `Creating dependencies - ${++counter} of ${dependencies.length}`;\r\n        if (!d1.dependsOn || d1.dependsOn.length == 0) continue;\r\n        for await (const d2 of d1.dependsOn) {\r\n          await this.n4jHelper.writeQuery(this.cqh.createDependencyQuery, {\r\n            project: mainComponent.bom_ref,\r\n            d1: d1.ref,\r\n            d2: d2.ref,\r\n          });\r\n        }\r\n      }\r\n\r\n      this.state = 'Import complete!';\r\n      console.log('Done');\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    this.isLoading = false;\r\n  };\r\n\r\n  parseComponents = (components: any) => {\r\n    let result: IComponent[] = [];\r\n    components.map((component: any) => {\r\n      result.push({\r\n        type: (component.type as ComponentType) || ComponentType.application,\r\n        name: component.name,\r\n        purl: component.purl || '',\r\n        version: component.version || 'undefined',\r\n      } as IComponent);\r\n    });\r\n    return result;\r\n  };\r\n\r\n  parseDependencies = (dependencies: any) => {\r\n    let result: IDependency[] = [];\r\n    dependencies.map((dependency: any) => {\r\n      const index = result.findIndex((d) => {\r\n        d.ref === dependency.ref;\r\n      });\r\n      if (index == -1) {\r\n        result.push({\r\n          ref: dependency.ref,\r\n          dependsOn: this.getDependsOn(dependency),\r\n        } as IDependency);\r\n      } else {\r\n        result[index].dependsOn = this.getDependsOn(dependency);\r\n      }\r\n    });\r\n    return result;\r\n  };\r\n\r\n  getDependsOn = (dependency: any) => {\r\n    let result: IDependency[] = [];\r\n    if (dependency.dependency == undefined) return result;\r\n    let dependsOnArray: any = dependency.dependency;\r\n    if (!(dependsOnArray instanceof Array)) dependsOnArray = [dependsOnArray];\r\n    dependsOnArray.map((dependency: any) => {\r\n      result.push({ ref: dependency.ref } as IDependency);\r\n    });\r\n    return result;\r\n  };\r\n  removeAll = () => {\r\n    this.runQuery('MATCH (n) DETACH DELETE n');\r\n  };\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { createContext, useContext } from 'react';\r\nimport { SbomStore } from '../stores/SbomStore';\r\n\r\nconst SbomContext = createContext<SbomStore>(new SbomStore());\r\n\r\nexport const SbomProvider = observer(({ children }: any) => {\r\n  const sbomStore = new SbomStore();\r\n\r\n  return <SbomContext.Provider value={sbomStore}>{children}</SbomContext.Provider>;\r\n});\r\n\r\nexport const useSbomStore = () => useContext(SbomContext);\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useState } from 'react';\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap';\r\nimport './App.css';\r\n\r\nimport { useSbomStore } from './providers/SbomProvider';\r\n\r\nconst App = observer(() => {\r\n  const query = 'MATCH (n:Person) WHERE n.name = $name RETURN n';\r\n  const [name, setName] = useState('Matej');\r\n  const [response, setResponse] = useState('');\r\n  const sbomStore = useSbomStore();\r\n\r\n  return sbomStore.isLoading ? (\r\n    <div>Loading</div>\r\n  ) : (\r\n    <Container className=\"p-5\">\r\n      <Row>\r\n        <Col xs={10}>\r\n          <Form.Control\r\n            type=\"text\"\r\n            onChange={(e) => setName(e.target.value)}\r\n            placeholder=\"Write query here...\"\r\n            value={name}\r\n          ></Form.Control>\r\n        </Col>\r\n        <Col xs={2}>\r\n          <Button variant=\"secondary\" onClick={() => {}}>\r\n            Run query\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <Row>{response}</Row>\r\n      {sbomStore.project ? (\r\n        sbomStore.project.map((d: any) => (\r\n          <Row>\r\n            <pre>{d}</pre>\r\n            <hr />\r\n          </Row>\r\n        ))\r\n      ) : (\r\n        <div>No data</div>\r\n      )}\r\n    </Container>\r\n  );\r\n});\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport { Link } from 'react-router-dom';\r\nconst MainNavbar = () => {\r\n  return (\r\n    <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\r\n      <Container>\r\n        <Navbar.Brand as={Link} to=\"/\">\r\n          DepVis\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse className=\"justify-content-end\">\r\n          <Nav className=\"justify-content-end\">\r\n            <Nav.Link as={Link} to=\"/upload\">\r\n              Upload\r\n            </Nav.Link>\r\n            <Nav.Link as={Link} to=\"/toolbox\">\r\n              Toolbox\r\n            </Nav.Link>\r\n            <NavDropdown title=\"Other\" id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item href=\"/update-db\">Update Database</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"/projects\">Manage Projects</NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item href=\"/about\">About</NavDropdown.Item>\r\n            </NavDropdown>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default MainNavbar;\r\n","import { Variant } from 'react-bootstrap/esm/types';\r\nimport Toast from 'react-bootstrap/Toast';\r\nimport React from 'react'\r\nimport './Notification.css'\r\n\r\nexport interface INotificationData {\r\n  title: string,\r\n  text: string,\r\n  variant?: string,\r\n  delay?: number\r\n  id?: string\r\n}\r\nexport interface INotificationProps {\r\n    title: string,\r\n    text: string,\r\n    onClose: Function,\r\n    variant?: string,\r\n    delay?: number\r\n    id: string\r\n}\r\n\r\nexport const Notification = (props:INotificationProps) => {\r\n    return (\r\n    <Toast className='notification' bg={props.variant} onClose={() => {props.onClose(props.id || '1')}} delay={props.delay || undefined} autohide={props.delay ? true : false}>\r\n      <Toast.Header>\r\n        <strong className=\"me-auto\">{props.title}</strong>\r\n      </Toast.Header>\r\n      <Toast.Body>{props.text} {props.id}</Toast.Body>\r\n    </Toast>\r\n  );\r\n}\r\n","import React, { useCallback, useState } from 'react';\r\nimport { createContext, useContext } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport { INotificationData, INotificationProps, Notification } from '../components/Notification/Notification';\r\nimport '../components/Notification/Notification.css'\r\n\r\nconst notificationsContext = {\r\n    notifications: [] as INotificationData[],\r\n    addNotification: (notification: INotificationData) => {},\r\n    clearNotification: (notificationId: string) => {}\r\n}\r\n\r\nexport type NotificationContextValue = typeof notificationsContext;\r\n\r\nconst NotificationContext = createContext<NotificationContextValue>(notificationsContext);\r\n\r\nexport const NotificationProvider = ({children}: any) => {\r\n    const [notifications, setNotifications] = useState<INotificationData[]>(notificationsContext.notifications)\r\n    const defaultDelay = 3000;\r\n    const addNotification = useCallback(\r\n        (notification: INotificationData) => {\r\n            const id = Date.now().toString()\r\n            notification.id = id;\r\n            const result = notifications.concat(notification);\r\n            setNotifications(result)\r\n    },[notifications, setNotifications]);\r\n\r\n    const clearNotification = useCallback(\r\n        (notificationId: string) => {\r\n            const result = notifications.filter((n) => n.id !== notificationId)\r\n            console.log(result)\r\n        setNotifications(result)\r\n        }, [notifications, setNotifications]);\r\n\r\n    const contextValue = {\r\n        notifications, addNotification, clearNotification\r\n    };\r\n\r\n    return <NotificationContext.Provider value = {contextValue}>\r\n        \r\n        {children}\r\n        <Container className='notification-container'>\r\n        {notifications.map(n => {\r\n            return <Notification key={n.id} title={n.title} text={n.text} variant={n.variant || 'light'} delay={n.delay || defaultDelay} onClose={clearNotification} id={n.id || '1'}></Notification>\r\n        })}\r\n        </Container>\r\n        </NotificationContext.Provider>\r\n}\r\n\r\nexport const useNotification = () => useContext(NotificationContext);\r\n","import React, { useState } from 'react';\r\nimport { Alert, Button, Container, Form } from 'react-bootstrap';\r\nimport { useSbomStore } from '../../providers/SbomProvider';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useNotification } from '../../providers/NotificationProvider';\r\nimport { Notification } from '../Notification/Notification';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { cloneRepository } from '../../helpers/downloadRepositoryHelper';\r\n\r\nconst allowedExtensionsRegex = /(\\.json|\\.xml)$/i;\r\n\r\nconst ImportForm = observer(() => {\r\n  const [file, setFile] = useState<any>('');\r\n  const [preview, setPreview] = useState<string>('');\r\n  const [repoUrl, setRepoUrl] = useState<string>('');\r\n  const [validated, setValidated] = useState(false);\r\n\r\n  const sbomStore = useSbomStore();\r\n  let navigate = useNavigate();\r\n  const notification = useNotification();\r\n  const handleFiles = (e: any) => {\r\n    const files = e.target.files;\r\n    if (!files) return;\r\n    const file = files[0];\r\n    console.log(file);\r\n    if (!allowedExtensionsRegex.exec(file.name)) {\r\n      alert('This extension is not allowed!');\r\n      setFile('');\r\n      return;\r\n    }\r\n    setFile(file);\r\n  };\r\n\r\n  const handleSubmit = async (e: any) => {\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n\r\n    setValidated(true);\r\n    e.preventDefault();\r\n    await sbomStore.parseProject(file);\r\n    //navigate('/');\r\n  };\r\n\r\n  const handlePreview = async (e: any) => {\r\n    e.preventDefault();\r\n    file && setPreview(await file.text());\r\n  };\r\n\r\n  const handleGenrateFromUrl = (e: any) => {\r\n    e.preventDefault();\r\n    sbomStore.downloadAndGenerate(repoUrl);\r\n  };\r\n\r\n  return (\r\n    <Container fluid=\"xxs\">\r\n      <Container className=\"p-3\">\r\n        <Form noValidate validated={validated}>\r\n          <Form.Group controlId=\"file\">\r\n            <Form.Label>SBOM File</Form.Label>\r\n            <Form.Control\r\n              required\r\n              type=\"file\"\r\n              placeholder=\"Select SBOM file\"\r\n              onChange={(e) => {\r\n                handleFiles(e);\r\n              }}\r\n            ></Form.Control>\r\n            <Form.Control.Feedback type=\"invalid\">Please select any XML / JSON file with SBOM.</Form.Control.Feedback>\r\n          </Form.Group>\r\n          <Button type=\"submit\" onClick={(e) => handleSubmit(e)} className=\"my-3\">\r\n            Submit form\r\n          </Button>\r\n          <Button variant=\"secondary\" onClick={(e) => handlePreview(e)}>\r\n            Preview\r\n          </Button>\r\n        </Form>\r\n        <h2>Or place repository URL to generate the SBOM automatically.</h2>\r\n        <Form>\r\n          <Form.Group controlId=\"repoUrl\">\r\n            <Form.Label>Repository URL</Form.Label>\r\n            <Form.Control\r\n              required\r\n              type=\"text\"\r\n              placeholder=\"Place URL for the repository.\"\r\n              onChange={(e) => {\r\n                setRepoUrl(e.target.value);\r\n              }}\r\n            ></Form.Control>\r\n            <Form.Control.Feedback type=\"invalid\">Please select any XML / JSON file with SBOM.</Form.Control.Feedback>\r\n          </Form.Group>\r\n          <Button type=\"submit\" onClick={(e) => handleGenrateFromUrl(e)} className=\"my-3\">\r\n            Submit form\r\n          </Button>\r\n        </Form>\r\n      </Container>\r\n      {preview && (\r\n        <Container>\r\n          <h2>Preview - {file.name}</h2>\r\n          <pre>{preview}</pre>\r\n        </Container>\r\n      )}\r\n      <Alert>{sbomStore.state}</Alert>\r\n    </Container>\r\n  );\r\n});\r\n\r\nexport default ImportForm;\r\n","import React from 'react';\r\nimport { Button, Col, Container, Row } from 'react-bootstrap';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\nconst PageNotFound = () => {\r\n  let navigate = useNavigate();\r\n\r\n  const onClick = () => {\r\n    navigate('/', { replace: true });\r\n  };\r\n  return (\r\n    <Container className=\"p-5 mx-auto\">\r\n      <Row className=\"justify-content-md-center m-3\">\r\n        <Col md=\"auto\">\r\n          <h3>The requested page does not exist!</h3>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"justify-content-md-center\">\r\n        <Col md=\"auto\">\r\n          <Button onClick={() => onClick()} size=\"lg\">\r\n            Go to homepage\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PageNotFound;\r\n","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nexport interface INodeProps {\r\n  name: string;\r\n  type?: string;\r\n  id: number;\r\n  properties?: any;\r\n  dependency?: [any];\r\n}\r\n\r\nexport const MyNode = (props: INodeProps) => {\r\n  return (\r\n    <Card style={{ width: '10rem', margin: '0.5rem' }}>\r\n      <Card.Title>{props.name}</Card.Title>\r\n      {props.type && <Card.Title>{props.type}</Card.Title>}\r\n      <Card.Text>\r\n        {props.properties &&\r\n          Object.keys(props.properties).map((p) => {\r\n            return (\r\n              <div>\r\n                {p}: {props.properties[p]}\r\n              </div>\r\n            );\r\n          })}\r\n      </Card.Text>\r\n    </Card>\r\n  );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Button, Container, Tab, Tabs } from 'react-bootstrap';\r\nimport { useSbomStore } from '../../providers/SbomProvider';\r\nimport { MyNode, INodeProps } from '../Node/MyNode';\r\n\r\nexport const Toolbox = observer(() => {\r\n  const [query, setQuery] = useState('match (p) return p');\r\n  const [nodes, setNodes] = useState<any>([]);\r\n  const sbomStore = useSbomStore();\r\n\r\n  const handleSubmit = () => {\r\n    sbomStore.runQuery(query);\r\n  };\r\n\r\n  const matchNode = (node: INodeProps) => {\r\n    if (!nodes.includes(node)) {\r\n      setNodes([node, ...nodes]);\r\n    }\r\n  };\r\n  return (\r\n    <Container>\r\n      <h2>Test queries</h2>\r\n      <input\r\n        type=\"text\"\r\n        onChange={(e) => {\r\n          setQuery(e.target.value || '');\r\n        }}\r\n        value={query}\r\n      />\r\n      <Button\r\n        onClick={() => {\r\n          handleSubmit();\r\n        }}\r\n      >\r\n        Send query\r\n      </Button>\r\n      <Button\r\n        variant=\"outline-danger\"\r\n        onClick={() => {\r\n          sbomStore.removeAll();\r\n        }}\r\n      >\r\n        Remove all nodes\r\n      </Button>\r\n      <Tabs>\r\n        <Tab eventKey=\"json\" title=\"Json\">\r\n          <pre>{sbomStore.json ? sbomStore.json : ''}</pre>\r\n        </Tab>\r\n        <Tab eventKey=\"node\" title=\"Node\" style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n          {sbomStore.project &&\r\n            sbomStore.project.map((r: any) => {\r\n              return <MyNode id={r.Id} name={r.name} properties={r.properties} type={r.label}></MyNode>;\r\n            })}\r\n        </Tab>\r\n      </Tabs>\r\n    </Container>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport ReactDOM from 'react-dom/client';\r\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\r\nimport MainNavbar from './components/MainNavbar/MainNavbar';\r\nimport ImportForm from './components/ImportForm/ImportForm';\r\nimport PageNotFound from './components/Error/PageNotFound';\r\nimport { SbomProvider } from './providers/SbomProvider';\r\nimport { NotificationProvider } from './providers/NotificationProvider';\r\nimport { Toolbox } from './components/Toolbox/Toolbox';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <NotificationProvider>\r\n      <SbomProvider>\r\n        <BrowserRouter>\r\n          <MainNavbar></MainNavbar>\r\n          <Routes>\r\n            <Route path=\"/\" element={<App />} />\r\n            <Route path=\"upload\" element={<ImportForm />} />\r\n            <Route path=\"toolbox\" element={<Toolbox />} />\r\n            <Route path=\"*\" element={<PageNotFound />} />\r\n          </Routes>\r\n        </BrowserRouter>\r\n      </SbomProvider>\r\n    </NotificationProvider>\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}